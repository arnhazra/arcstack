name: CI-CD-PIPELINE
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_API_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PROD_API }}
  VERCEL_UI_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PROD_UI }}

on:
  push:
    branches:
      - main

jobs:
  api-gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Build API Gateway application
        working-directory: apps/apigateway
        run: |
          npm install
          CI=false npm run build

      - name: Configure packages
        working-directory: apps/apigateway
        run: jq 'del(.devDependencies)' package.json > temp.json && mv temp.json package.json

      - name: Pull Vercel Environment Information
        working-directory: apps/apigateway
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: apps/apigateway
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Publish Project Artifacts to Vercel
        working-directory: apps/apigateway
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  ui-service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel Environment Information
        working-directory: apps/uiservice
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: apps/uiservice
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Publish Project Artifacts to Vercel
        working-directory: apps/uiservice
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
